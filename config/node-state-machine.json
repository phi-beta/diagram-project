{
  "stateMachine": {
    "name": "NodeInteractionStateMachine",
    "description": "Pure logical state machine for node interactions - no technical events or visual actions",
    "initialState": "idle",
    "states": {
      "idle": {
        "description": "Node is not being interacted with"
      },
      "mousePressed": {
        "description": "Mouse button is pressed on node but not yet determined if click or drag"
      },
      "selected": {
        "description": "Node is selected but not being manipulated"
      },
      "dragging": {
        "description": "Node is being dragged"
      },
      "scaling": {
        "description": "Node is being scaled"
      },
      "edgeSource": {
        "description": "Node is the source of an edge being created"
      },
      "edgeTarget": {
        "description": "Node is being targeted for edge completion"
      },
      "cooldown": {
        "description": "Node is in cooldown after edge completion (prevents immediate reselection)"
      }
    },
    "transitions": {
      "idle": {
        "mousePress": "mousePressed",
        "becomeEdgeTarget": "edgeTarget"
      },
      "mousePressed": {
        "mouseRelease": "selected",
        "startDrag": "dragging",
        "startScale": "scaling",
        "resetToIdle": "idle"
      },
      "selected": {
        "deselect": "idle",
        "mousePress": "mousePressed",
        "startEdgeCreation": "edgeSource",
        "becomeEdgeTarget": "edgeTarget",
        "resetToIdle": "idle"
      },
      "dragging": {
        "finishDrag": "selected",
        "cancelToIdle": "idle",
        "resetToIdle": "idle"
      },
      "scaling": {
        "finishScale": "selected",
        "cancelToIdle": "idle",
        "resetToIdle": "idle"
      },
      "edgeSource": {
        "completeEdge": "selected",
        "cancelEdgeCreation": "selected",
        "resetToIdle": "idle"
      },
      "edgeTarget": {
        "completeEdge": "cooldown",
        "cancelEdgeTarget": "idle",
        "resetToIdle": "idle"
      },
      "cooldown": {
        "timeout": "idle",
        "resetToIdle": "idle"
      }
    }
  },
  "eventMapping": {
    "description": "Maps technical events to logical transitions",
    "rules": [
      {
        "event": "mouseDown",
        "conditions": [
          {
            "state": "idle",
            "condition": "inEdgeCreationMode",
            "action": "becomeEdgeTarget"
          },
          {
            "state": "idle",
            "condition": "!inEdgeCreationMode",
            "action": "mousePress"
          },
          {
            "state": "selected",
            "condition": "inEdgeCreationMode",
            "action": "becomeEdgeTarget"
          },
          {
            "state": "selected",
            "condition": "!inEdgeCreationMode",
            "action": "mousePress"
          }
        ]
      },
      {
        "event": "mouseDrag", 
        "conditions": [
          {
            "state": "mousePressed",
            "action": "startDrag"
          }
        ]
      },
      {
        "event": "mouseUp",
        "conditions": [
          {
            "state": "mousePressed",
            "action": "mouseRelease"
          },
          {
            "state": "dragging",
            "action": "finishDrag"
          },
          {
            "state": "scaling",
            "action": "finishScale"
          },
          {
            "state": "edgeTarget",
            "condition": "inEdgeCreationMode",
            "action": "completeEdge"
          }
        ]
      },
      {
        "event": "clickToDeselect",
        "conditions": [
          {
            "state": "selected",
            "action": "deselect"
          }
        ]
      },
      {
        "event": "nodeClickInEdgeMode",
        "conditions": [
          {
            "state": "idle",
            "condition": "inEdgeCreationMode",
            "action": "becomeEdgeTarget"
          },
          {
            "state": "selected",
            "condition": "inEdgeCreationMode",
            "action": "becomeEdgeTarget"
          }
        ]
      },
      {
        "event": "startEdgeCreation",
        "conditions": [
          {
            "state": "selected",
            "action": "startEdgeCreation"
          }
        ]
      },
      {
        "event": "cancelEdgeCreation",
        "conditions": [
          {
            "state": "edgeSource",
            "action": "cancelEdgeCreation"
          }
        ]
      },
      {
        "event": "escapeKey",
        "conditions": [
          {
            "state": "edgeSource",
            "action": "cancelEdgeCreation"
          },
          {
            "state": "edgeTarget",
            "action": "cancelEdgeTarget"
          },
          {
            "state": "selected",
            "action": "resetToIdle"
          },
          {
            "state": "mousePressed",
            "action": "resetToIdle"
          },
          {
            "state": "dragging",
            "action": "resetToIdle"
          },
          {
            "state": "scaling",
            "action": "resetToIdle"
          },
          {
            "state": "cooldown",
            "action": "resetToIdle"
          },
          {
            "state": "hover",
            "action": "resetToIdle"
          }
        ]
      },
      {
        "event": "timeout",
        "conditions": [
          {
            "state": "cooldown",
            "action": "timeout"
          }
        ]
      }
    ]
  },
  "visualActions": {
    "description": "Visual changes for each state",
    "states": {
      "idle": {
        "onEnter": ["removeHighlight", "clearDragState"],
        "onExit": []
      },
      "mousePressed": {
        "onEnter": [],
        "onExit": []
      },
      "selected": {
        "onEnter": ["addHighlight"],
        "onExit": ["removeHighlight"]
      },
      "dragging": {
        "onEnter": ["addDragHighlight"],
        "onExit": ["removeDragHighlight"]
      },
      "scaling": {
        "onEnter": ["addScaleHighlight"],
        "onExit": ["removeScaleHighlight"]
      },
      "edgeSource": {
        "onEnter": ["addEdgeSourceHighlight"],
        "onExit": ["removeEdgeSourceHighlight"]
      },
      "edgeTarget": {
        "onEnter": ["addEdgeTargetHighlight", "clearDragState"],
        "onExit": ["removeEdgeTargetHighlight"]
      },
      "cooldown": {
        "onEnter": ["removeHighlight", "clearDragState", "setTimeout:500"],
        "onExit": []
      }
    }
  }
}
